name: Deploy to Vercel with Docker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and test
  test:
    runs-on: ubuntu-latest
    name: Test and Build Check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check
        continue-on-error: false

      # - name: Run linting
      #   run: npm run lint
      #   continue-on-error: false

      - name: Build project
        run: npm run build

  # Job 2: Build Docker image
  build-docker:
    runs-on: ubuntu-latest
    name: Build Docker Image
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ chungta0609 }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CUSTOM_KEY=${{ secrets.CUSTOM_KEY }}

  # Job 3: Deploy to Vercel Preview (for PRs)
  deploy-preview:
    runs-on: ubuntu-latest
    name: Deploy Preview
    needs: [test, build-docker]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts with Docker
        run: |
          docker build -t portfolio-preview .
          docker create --name temp-container portfolio-preview
          docker cp temp-container:/app/.next ./.next
          docker rm temp-container

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with Preview URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🐳 **Docker Preview deployment ready!**
              
              ✅ Preview URL: ${{ steps.deploy.outputs.preview_url }}
              🐳 Built with Docker
              
              📝 Commit: ${context.sha.substring(0, 7)}
              🌿 Branch: ${context.ref.replace('refs/heads/', '')}
              
              This preview will be automatically updated when you push new commits to this PR.`
            })

  # Job 4: Deploy to Production (for main branch)
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts with Docker
        run: |
          docker build -t portfolio-production .
          docker create --name temp-container portfolio-production
          docker cp temp-container:/app/.next ./.next
          docker rm temp-container

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT

      # - name: Create deployment status
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       github.rest.repos.createDeploymentStatus({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         deployment_id: context.payload.deployment?.id || 0,
      #         state: 'success',
      #         environment_url: '${{ steps.deploy.outputs.production_url }}',
      #         description: 'Docker deployment to production successful'
      #       })

  # Job 5: Security scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: build-docker
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Lighthouse Performance Check (optional)
  # lighthouse:
  #   runs-on: ubuntu-latest
  #   name: Lighthouse Performance Check
  #   needs: deploy-production
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '18'

  #     - name: Install Lighthouse CI
  #       run: npm install -g @lhci/cli@0.12.x

  #     - name: Run Lighthouse CI
  #       run: |
  #         lhci autorun
  #       env:
  #         LHCI_GITHUB_APP_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
  #         LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.head_commit.timestamp }}
